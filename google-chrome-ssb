#!/usr/bin/env bash
#
# google-chrome-ssb

[ "${DEBUG}" = "Y" ] && set -x

readonly CAT="$(command -v cat 2> /dev/null)"
readonly CHMOD="$(command -v chmod 2> /dev/null)"
readonly CP="$(command -v cp 2> /dev/null)"
readonly ECHO="$(command -v echo 2> /dev/null)"
readonly HEAD="$(command -v head 2> /dev/null)"
readonly LN="$(command -v ln 2> /dev/null)"
readonly MDFIND="$(command -v mdfind 2> /dev/null)"
readonly MKDIR="$(command -v mkdir 2> /dev/null)"
readonly PRINTF="$(command -v printf 2> /dev/null)"
readonly PWD="$(command -v pwd 2> /dev/null)"
readonly RM="$(command -v rm 2> /dev/null)"
readonly SIPS="$(command -v sips 2> /dev/null)"
readonly TIFF2ICNS="$(command -v tiff2icns 2> /dev/null)"

[ -x "${CAT}" ] || exit 1
[ -x "${CHMOD}" ] || exit 1
[ -x "${CP}" ] || exit 1
[ -x "${ECHO}" ] || exit 1
[ -x "${HEAD}" ] || exit 1
[ -x "${LN}" ] || exit 1
[ -x "${MDFIND}" ] || exit 1
[ -x "${MKDIR}" ] || exit 1
[ -x "${PRINTF}" ] || exit 1
[ -x "${PWD}" ] || exit 1
[ -x "${RM}" ] || exit 1
[ -x "${SIPS}" ] || exit 1
[ -x "${TIFF2ICNS}" ] || exit 1

_GOOGLE_CHROME="/Applications/Google Chrome.app"
_ROOT="$(${PWD})"

##############################
# __lproj()
#
# Arguments:
#   1: name (string)
#   2: language (string)
# Returns:
#   Nothing
##############################
__lproj() {

  local l_myapp_name="${1}"
  local l_myapp_language="${2}"

  local l_language_code=""

  l_language_code="$(${PRINTF} "%s\n" "${l_myapp_language//[!a-z]/}")"

  if [[ "${#l_language_code}" -eq 2 ]]; then
    ${MKDIR} "${_ROOT}/${l_myapp_name}.app/Contents/Resources/${l_language_code}.lproj" || return 1
    ${CAT} > "${_ROOT}/${l_myapp_name}.app/Contents/Resources/${l_language_code}.lproj/InfoPlist.strings" << EOT
CFBundleDisplayName = "${l_myapp_name}";
CFBundleName = "${l_myapp_name}";
EOT
  else
    return 1
  fi

}

##############################
# __trim()
#
# Arguments:
#   1: name (string)
# Returns:
#   1: name (string)
##############################
__trim() {

  local l_var="${1}"

  l_var="${l_var#"${l_var%%[![:space:]]*}"}"
  l_var="${l_var%"${l_var##*[![:space:]]}"}"
  ${ECHO} -n "${l_var}"

}

##############################
# main()
#
# Arguments:
#   None
# Returns:
#   None
##############################
main() {

## find chrome, if it's not in the standard path, try to find it using spotlight
if [ ! -d "${_GOOGLE_CHROME}" ]; then
  _GOOGLE_CHROME="$(${MDFIND} "kMDItemCFBundleIdentifier == 'com.google.Chrome'"|${HEAD} -n 1)"
  if [ -z "${_GOOGLE_CHROME}" ]; then
    ${ECHO} " *** ERROR *** Where is Google Chrome installed ?!?!"
    exit 1
  fi
fi

## get app name
${ECHO} -n " > How the application should be called? [Google] "
# shellcheck disable=SC2162
read myapp_name_input
myapp_name="$(__trim "${myapp_name_input}")"

## get app url
${ECHO} -n " > What's the URL? [https://google.com] "
# shellcheck disable=SC2162
read myapp_url_input
myapp_url="$(__trim "${myapp_url_input}")"

## get app icon
${ECHO} -n " > What's the full path to the icon? [/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns] "
# shellcheck disable=SC2162
read myapp_icon_input
myapp_icon="$(__trim "${myapp_icon_input}")"

## get app language
${ECHO} -n " > What's the language code you want to use? [en] "
# shellcheck disable=SC2162
read myapp_language_input
myapp_language="$(__trim "${myapp_language_input}")"

## defaults
[ -n "${myapp_name}" ] || myapp_name="Google"
[ -n "${myapp_url}" ] || myapp_url="https://google.com"
[ -n "${myapp_icon}" ] || myapp_icon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns"
[ -n "${myapp_language}" ] || myapp_language="en"

## check if app already exists
if [ -d "${_ROOT}/${myapp_name}.app" ]; then
  ${ECHO} "${_ROOT}/${myapp_name}.app already exists, exiting..."
  exit 1
fi

## init
${MKDIR} -p "${_ROOT}/${myapp_name}.app/Contents/MacOS"
${MKDIR} -p "${_ROOT}/${myapp_name}.app/Contents/Resources"
${LN} -s "${_GOOGLE_CHROME}/Contents/MacOS/Google Chrome" "${_ROOT}/${myapp_name}.app/Contents/MacOS/Google Chrome SSB"
${LN} -s "${_GOOGLE_CHROME}/Contents/Versions" "${_ROOT}/${myapp_name}.app/Contents/Versions"

## convert icon if necessary
if [ -f "${myapp_icon}" ]; then
  if [ "${myapp_icon##*.}" = "icns" ]; then
    ${CP} "${myapp_icon}" "${_ROOT}/${myapp_name}.app/Contents/Resources/${myapp_name}.icns"
  else
    ${SIPS} \
    --resampleWidth 128 \
    --setProperty format tiff \
    "${myapp_icon}" \
    --out "${_ROOT}/${myapp_name}.app/Contents/Resources/${myapp_name}.tiff" 1> /dev/null 2> /dev/null
    ${TIFF2ICNS} \
    -noLarge \
    "${_ROOT}/${myapp_name}.app/Contents/Resources/${myapp_name}.tiff" \
    "${_ROOT}/${myapp_name}.app/Contents/Resources/${myapp_name}.icns" 1> /dev/null 2> /dev/null
  fi
fi

## create the Info.plist
${CAT} > "${_ROOT}/${myapp_name}.app/Contents/Info.plist" << EOT
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleExecutable</key>
  <string>${myapp_name}</string>
  <key>CFBundleIconFile</key>
  <string>${myapp_name}.icns</string>
  <key>CFBundleIdentifier</key>
  <string>com.google.Chrome.${myapp_name}</string>
  <key>CFBundleName</key>
  <string>${myapp_name}</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>KSProductID</key>
  <string>com.google.Chrome.${myapp_name}</string>
  <key>NSHighResolutionCapable</key>
  <string>True</string>
</dict>
</plist>
EOT

## create the wrapper script
${CAT} > "${_ROOT}/${myapp_name}.app/Contents/MacOS/${myapp_name}" << EOT
#!/bin/bash
ABSPATH=\$(cd "\$(dirname "\${0}")"; pwd)
PROFILEPATH="\${HOME}/Library/Application Support/Google Chrome SSB/${myapp_name}"
exec "\${ABSPATH}/Google Chrome SSB" \
--app="${myapp_url}" \\
--disable-default-apps \\
--disable-extensions \\
--disable-new-profile-management \\
--disable-password-generation \\
--no-first-run \\
--user-data-dir="\${PROFILEPATH}" "\${*}"
EOT
${CHMOD} 0755 "${_ROOT}/${myapp_name}.app/Contents/MacOS/${myapp_name}"

## create localization(s)
__lproj "${myapp_name}" "en"
if [ "${myapp_language}" != "en" ]; then
  __lproj "${myapp_name}" "${myapp_language}"
fi

## finish !!!
${CAT} << EOT
 App has been created in ${_ROOT}/${myapp_name}.app
EOT

}

main "${@}"
